go.property("near_z", -1)
go.property("far_z", 1)
go.property("zoom", 1)
go.property("projection", hash("DEFAULT"))
go.property("enabled", true)

local camera = require "orthographic.camera"


local ENABLE = hash("enable")
local DISABLE = hash("disable")
local UNFOLLOW = hash("unfollow")
local FOLLOW = hash("follow")
local RECOIL = hash("recoil")
local SHAKE = hash("shake")
local STOP_SHAKING = hash("stop_shaking")
local DEADZONE = hash("deadzone")
local BOUNDS = hash("bounds")
local UPDATE_CAMERA = hash("update_camera")
local ZOOM_TO = hash("zoom_to")

function init(self)
	camera.init(go.get_id(), {
		near_z = self.near_z,
		far_z = self.far_z,
		projector_id = self.projection,
		zoom = self.zoom,
	})
end


function final(self)
	camera.final(go.get_id())
end


function update(self, dt)
	if self.enabled then
		
		-- update camera and view projection after all game objects have been updated
		-- will jitter otherwise
		msg.post("#", UPDATE_CAMERA, { dt = dt })
	end
end


function on_message(self, message_id, message, sender)
	if message_id == UPDATE_CAMERA then
		camera.update(go.get_id(), message.dt)
		camera.send_view_projection(go.get_id())
	elseif message_id == ENABLE then
		self.enabled = true
	elseif message_id == DISABLE then
		self.enabled = false
	elseif message_id == UNFOLLOW then
		camera.unfollow(go.get_id())
	elseif message_id == FOLLOW then
		camera.follow(go.get_id(), message.target, message.lerp)
	elseif message_id == DEADZONE then
		camera.deadzone(go.get_id(), message.left, message.top, message.right, message.bottom)
	elseif message_id == BOUNDS then
		camera.bounds(go.get_id(), message.left, message.top, message.right, message.bottom)
	elseif message_id == SHAKE then
		camera.shake(go.get_id(), message.intensity, message.duration, message.direction, function()
			msg.post(sender, "shake_completed")
		end)
	elseif message_id == RECOIL then
		camera.recoil(go.get_id(), message.offset, message.duration)
	elseif message_id == STOP_SHAKING then
		camera.stop_shaking(go.get_id())
	elseif message_id == ZOOM_TO then
		self.zoom = message.zoom
		camera.set_zoom(go.get_id(), message.zoom)
	end
end