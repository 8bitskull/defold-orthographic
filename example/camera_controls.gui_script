local camera = require "orthographic.camera"

local CAMERA_ID = hash("/camera")

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("deadzone_visualizer"), false)
	self.bounds_enabled = false
	self.deadzone_enabled = false
	self.zoomlevel = 1.0
	msg.post("#", "get_zoomlevel")
end


function update(self, dt)
	local bounds = camera.screen_to_world_bounds(CAMERA_ID)
	gui.set_text(gui.get_node("bottom_left"), ("%d,%d"):format(bounds.x, bounds.w))
	gui.set_text(gui.get_node("bottom_right"), ("%d,%d"):format(bounds.z, bounds.w))
	gui.set_text(gui.get_node("top_left"), ("%d,%d"):format(bounds.x, bounds.y))
	gui.set_text(gui.get_node("top_right"), ("%d,%d"):format(bounds.z, bounds.y))
end


function on_message(self, message_id, message, sender)
	if message_id == hash("get_zoomlevel") then
		self.zoomlevel = camera.get_zoom(CAMERA_ID)
		gui.set_text(gui.get_node("zoomlevel"), tostring(self.zoomlevel))
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		if gui.pick_node(gui.get_node("unfollow/button"), action.x, action.y) then
			msg.post("camera", "unfollow")
			return true
		elseif gui.pick_node(gui.get_node("follow_basic/button"), action.x, action.y) then
			msg.post("camera", "follow", { target = "/player" })
			return true
		elseif gui.pick_node(gui.get_node("follow_lerp/button"), action.x, action.y) then
			msg.post("camera", "follow", { target = "/player", lerp = 0.1 })
			return true
		elseif gui.pick_node(gui.get_node("shake_both/button"), action.x, action.y) then
			msg.post("camera", "shake", { intensity = 0.05, duration = 0.5, direction = hash("both") })
			return true
		elseif gui.pick_node(gui.get_node("shake_horizontal/button"), action.x, action.y) then
			msg.post("camera", "shake", { intensity = 0.05, duration = 0.5, direction = hash("horizontal") })
			return true
		elseif gui.pick_node(gui.get_node("shake_vertical/button"), action.x, action.y) then
			msg.post("camera", "shake", { intensity = 0.05, duration = 0.5, direction = hash("vertical") })
			return true
		elseif gui.pick_node(gui.get_node("stop_shaking/button"), action.x, action.y) then
			msg.post("camera", "stop_shaking")
			return true
		elseif gui.pick_node(gui.get_node("bounds/button"), action.x, action.y) then
			self.bounds_enabled = not self.bounds_enabled
			if self.bounds_enabled then
				msg.post("camera", "bounds", { left = 0, right = 1728, bottom = 0, top = 1280 })
			else
				msg.post("camera", "bounds", {})
			end
			return true
		elseif gui.pick_node(gui.get_node("deadzone/button"), action.x, action.y) then
			self.deadzone_enabled = not self.deadzone_enabled
			local dz = gui.get_node("deadzone_visualizer")
			gui.set_enabled(dz, self.deadzone_enabled)
			if self.deadzone_enabled then
				gui.set_size(dz, vmath.vector3(600, 400, 0))
				msg.post("camera", "deadzone", { left = 300, right = 300, bottom = 200, top = 200 })
			else
				msg.post("camera", "deadzone", {})
			end
			return true
		elseif gui.pick_node(gui.get_node("zoomin/button"), action.x, action.y) then
			self.zoomlevel = self.zoomlevel + 0.25
			msg.post("camera", "zoom_to", { zoom = self.zoomlevel } )
			gui.set_text(gui.get_node("zoomlevel"), tostring(self.zoomlevel))
			return true
		elseif gui.pick_node(gui.get_node("zoomout/button"), action.x, action.y) then
			self.zoomlevel = math.max(0.25, self.zoomlevel - 0.25)
			msg.post("camera", "zoom_to", { zoom = self.zoomlevel } )
			gui.set_text(gui.get_node("zoomlevel"), tostring(self.zoomlevel))
			return true
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
