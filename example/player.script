local camera = require "orthographic.camera"

local SPEED = 400

local function lerp(t, dt, from, to)
	return vmath.lerp(1 - math.pow(t, dt), from, to)
end

function init(self)
	self.input = {}
	self.crosshair = vmath.vector3()
	self.camera_offset = vmath.vector3()
end

function update(self, dt)
	-- update crosshair based on mouse and camera position
	local cursor_pos = camera.screen_to_world(go.get_id("camera"), self.crosshair)
	go.set_position(vmath.lerp(0.5, go.get_position("crosshair"), cursor_pos), "crosshair")

	-- update player position
	local pos = go.get_position()
	if self.input[hash("up")] then
		pos.y = pos.y + SPEED * dt
		self.camera_offset.y = lerp(0.25, dt, self.camera_offset.y, 300)
	elseif self.input[hash("down")] then
		pos.y = pos.y - SPEED * dt
		self.camera_offset.y = lerp(0.25, dt, self.camera_offset.y, -300)
	end
	if self.input[hash("left")] then
		pos.x = pos.x - SPEED * dt
		self.camera_offset.x = lerp(0.25, dt, self.camera_offset.x, -500)
	elseif self.input[hash("right")] then
		pos.x = pos.x + SPEED * dt
		self.camera_offset.x = lerp(0.25, dt, self.camera_offset.x, 500)
	end
	camera.follow(go.get_id("camera"), go.get_id(), 0.1, self.camera_offset)
	go.set_position(pos)
end

function on_input(self, action_id, action)
	self.crosshair.x = action.x
	self.crosshair.y = action.y
	
	if action_id then
		if action.pressed then
			self.input[action_id] = true
		elseif action.released then
			self.input[action_id] = false
		end

		-- shoot and apply recoil
		if action_id == hash("touch") and action.released then
			local crosshair_pos = go.get_position("crosshair")
			local player_pos = go.get_position()
			local offset = (crosshair_pos - player_pos) * 0.1
			camera.recoil(go.get_id("camera"), offset, 0.5)
		end
	end
end
